{"version":3,"sources":["components/Navbar.js","components/TextForms.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForms","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","uppCase","toUpperCase","showAlert","lowerCase","toLowerCase","navigator","clipboard","writeText","newText","split","join","length","defaultProps","about","Alert","alert","class","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e25e1b7d.chunk.js","sourcesContent":["import React from 'react'\r\nimport propTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n  <div>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/\">{props.about}</a>\r\n        </li> */}\r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable Dark Mode</label>\r\n    </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: propTypes.string,\r\n    about: propTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here...',\r\n    about: 'Set about text here...'\r\n}\r\n","//type rfc shortcut for default react template\r\nimport React, {useState} from 'react'\r\n\r\nexport default function TextForms(props) {\r\n\r\n    const handleUpClick = ()=>{\r\n        console.log(\"handleUpClick clicked...\");\r\n        let uppCase = text.toUpperCase();\r\n        setText(uppCase);\r\n        props.showAlert(\"Converted to uppercase \",\"success\");\r\n    }\r\n\r\n    const handlelowerClick = ()=>{\r\n        console.log(\"handlelowerClick clicked...\");\r\n        let lowerCase = text.toLowerCase();\r\n        setText(lowerCase);\r\n        props.showAlert(\"Converted to lowercase \",\"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{\r\n        console.log(\"handleClearClick clicked...\");\r\n        setText(\"\");\r\n        props.showAlert(\"Text has been cleared \",\"success\");\r\n    }\r\n\r\n    function removeSpacesClick() {\r\n        console.log(\"removeSpacesClick clicked...\");\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed extra spaces from the text \",\"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        console.log(\"handleOnChange called...\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n            <div className=\"mb-3\">\r\n                <h1>{props.heading}</h1>\r\n                {/* onChange is used here because we are using state variable - text and we have to update that variable */}\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handlelowerClick}>Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={() =>  navigator.clipboard.writeText(text)}>Copy</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={removeSpacesClick}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n            <h1>Your text summary</h1>\r\n            <p>{text.split(\" \").length-1} words, {text.length} characters</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in above textbox to preview it here...\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n        }\r\n    return (\r\n           props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import Navbar from './components/Navbar';\nimport TextForms from './components/TextForms';\n// import About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Routes,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message,type)=>{\n      setAlert({\n        msg:message,\n        type:type\n      })\n      setTimeout(()=> {\n        setAlert(null);\n      },3000);\n  }\n  const toggleMode =()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743'\n      showAlert(\"Dark Mode has been enabled \",\"success\");\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light Mode has been enabled \",\"success\");\n    }\n    \n  }\n  \n  return (\n    <>\n    {/* <Router> */}\n<Navbar title=\"TextUtils\" about=\"About TextUtils\" mode={mode} toggleMode={toggleMode}/>\n<Alert alert={alert}/>\n<div className=\"container my-3\">\n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          <TextForms showAlert={showAlert} heading=\"Enter your text for analysis\" mode={mode}/>\n          </Route>\n        </Switch> */}\n  <TextForms showAlert={showAlert} heading=\"Enter your text for analysis\" mode={mode}/>\n  {/* <About/> */}\n</div>\n{/* </Router> */}\n\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}